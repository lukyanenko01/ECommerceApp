//
//  ContactsView.swift
//  ECommerceAppPizza
//
//  Created by Vladimir Lukyanenko on 27.06.2023.
//

import SwiftUI
import MapKit

struct ContactsView: View {
    
    @State var coordinateRegion = MKCoordinateRegion(center: CLLocationCoordinate2D(latitude: 40.7, longitude: -74.0), span: MKCoordinateSpan(latitudeDelta: 0.5, longitudeDelta: 0.5))
    @State var annotations = [IdentifiablePointAnnotation]()
    
    let phoneNumber = "+380982861789"
    let address = "–≤—É–ª–∏—Ü—è –§–æ—Ä—Ç–µ—á–Ω–∞, 4 –∞, –ó–∞–ø–æ—Ä—ñ–∂–∂—è, –ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å, 69061"
    let telegramURL = "https://t.me/lukyanenko7"
    let instagramURL = "https://instagram.com/pizza.est?igshid=MzRlODBiNWFlZA=="
    
    
    var body: some View {
        VStack(spacing: 20) {
            Map(coordinateRegion: $coordinateRegion, annotationItems: annotations) { annotation in
                MapMarker(coordinate: annotation.coordinate, tint: .blue)
            }
            .frame(height: UIScreen.main.bounds.height / 4)
            .cornerRadius(8)
            .onAppear {
                geocodeAddressString(address: address)
            }
            .onTapGesture {
                openMapWithAddress(address: address)
            }
            ScrollView(.vertical, showsIndicators: false) {
                
                VStack(alignment: .leading, spacing: 15) {
                    Text("–ü—ñ—Ü–ê–Ñ")
                        .font(.custom(customFont, size: 24).bold())
                    
                    Text(address)
                        .font(.custom(customFont, size: 17))
                    
                    Text("–ì—Ä–∞—Ñ—ñ–∫: 11:00 - 22:00, 24/7")
                        .font(.custom(customFont, size: 17))
                    
                    HStack(spacing: 20) {
                        Link(destination: URL(string: telegramURL)!, label: {
                            Image("telegram-icon")
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 40, height: 40)
                                .clipShape(Circle())
                        })
                        Link(destination: URL(string: instagramURL)!, label: {
                            Image("instagram-icon")
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 40, height: 40)
                                .clipShape(Circle())
                        })
                        Button(action: {
                               let telephone = "tel://"
                               let formattedString = telephone + phoneNumber
                               guard let url = URL(string: formattedString) else { return }
                               UIApplication.shared.open(url)
                           }) {
                               Image("phone-icon")
                                   .resizable()
                                   .aspectRatio(contentMode: .fit)
                                   .frame(width: 40, height: 40)
                                   .clipShape(Circle())
                           }
                    }
                    .padding()
                    
                    Text("–ü—ñ—Ü–∞—î - —Ü–µ –ø—ñ—Ü–µ—Ä—ñ—è –≤ –ó–∞–ø–æ—Ä—ñ–∂–∂—ñ –∑ –¥—ñ–π—Å–Ω–æ —Å–º–∞—á–Ω–æ—é –ø—ñ—Ü–æ—é! –í –º–µ–Ω—é —î –ø—ñ—Ü–∞ —Ç–∞ –Ω–µ —Ç—ñ–ª—å–∫–∏! –¢–∞–∫–æ–∂ —Å–∞–ª–∞—Ç–∏, –ø–µ–ª—å–º–µ–Ω—ñ —Ç–∞ –≤–∞—Ä–µ–Ω–∏–∫–∏ –≤–ª–∞—Å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏, –Ω–∞–≥–µ—Ç—Å–∏, –∫–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ. –Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ —Å–∫—É—à—Ç—É–≤–∞—Ç–∏ –ø—ñ—Ü—É –∑ —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö —è–∫—ñ—Å–Ω–∏—Ö, —ñ—Ç–∞–ª—ñ–π—Å—å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —Ç–æ –ª–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –ü—ñ—Ü–∞—î! –ë—ñ–ª—å—à–µ 20 –≤–∏–¥—ñ–≤ –ø—ñ—Ü, —è–∫—ñ —Ö–æ—á–µ—Ç—å—Å—è –∑'—ó—Å—Ç–∏ –≤—ñ–¥ —Å–∫–æ—Ä–∏–Ω–∫–∏ –¥–æ —Å–∫–æ—Ä–∏–Ω–∫–∏. –¢–∞–∫–∞ —Å–º–∞—á–Ω–∞ —ñ —Ç–∞–∫–∞ —Ä—ñ–∑–Ω–∞ü§§")
                        .font(.system(size: 16))
                        .foregroundColor(.gray)
                        .lineSpacing(8)
                }
            }
        }
        .padding()
    }
    
    private func openMapWithAddress(address: String) {
        let geoCoder = CLGeocoder()
        geoCoder.geocodeAddressString(address) { placemarks, error in
            guard let placemarks = placemarks, let placemark = placemarks.first else {
                return
            }
            
            guard let location = placemark.location else {
                return
            }
            
            let latitude: CLLocationDegrees = location.coordinate.latitude
            let longitude: CLLocationDegrees = location.coordinate.longitude
            
            let regionDistance: CLLocationDistance = 10000
            let coordinates = CLLocationCoordinate2DMake(latitude, longitude)
            let regionSpan = MKCoordinateRegion(center: coordinates, latitudinalMeters: regionDistance, longitudinalMeters: regionDistance)
            
            let mapItem = MKMapItem(placemark: MKPlacemark(coordinate: coordinates, addressDictionary: nil))
            mapItem.name = "Target location"
            mapItem.openInMaps(launchOptions: [MKLaunchOptionsMapCenterKey: NSValue(mkCoordinate: regionSpan.center), MKLaunchOptionsMapSpanKey: NSValue(mkCoordinateSpan: regionSpan.span)])
        }
    }
    
    private func geocodeAddressString(address: String) {
        let geocoder = CLGeocoder()
        geocoder.geocodeAddressString(address) { placemarks, error in
            guard let placemark = placemarks?.first, let location = placemark.location else { return }
            let annotation = IdentifiablePointAnnotation()
            annotation.coordinate = location.coordinate
            coordinateRegion = MKCoordinateRegion(center: location.coordinate, latitudinalMeters: 500, longitudinalMeters: 500)
            annotations.append(annotation)
        }
    }
    
}

struct ContactsView_Previews: PreviewProvider {
    static var previews: some View {
        ContactsView()
    }
}

class IdentifiablePointAnnotation: NSObject, MKAnnotation, Identifiable {
    let id = UUID()
    var coordinate: CLLocationCoordinate2D
    var title: String?
    var subtitle: String?
    
    override init() {
        self.coordinate = CLLocationCoordinate2D()
        self.title = ""
        self.subtitle = ""
    }
}


